
18.- puts 'Hola mundo', significa escribe por pantalla 'Hola mundo'
21.- Las dobles comillas interpolan por lo tanto muestra un retorno de carro y 
     y un tabulado, en cambio las comillas simples mostrarían '/t/n'
22.- %q funciona como las comillas simples, es decir, no interpola por lo tanto al ejecutar las dos ordenes lo mostraría tal cual se escriben dentro de las llaves
23.- %Q funciona como las comillas dobles, es decir hacer un interpolado de las variables que se incluyan entre llaves, o de las palabras reservadas, en este caso el hello World saldría con un retorno de carro al final. El "a" "b" "c" en este caso no te interpola y por eso en salida lo muestra con \a\...
24.- En c queda lo siguiente  "--4--\n--2--\n"
25.- En c queda : "--\#{a}--\n--\#{b}--\n" 
26.
s[0,2]	: "He" 

s[-1,1] : "o"

s[0,10] : "Hello" 
27.- en g queda "Helloworld"
28.- en e queda "..."
29.- en a queda 222
30.- %w crea un array con los elementos de la cadena
31.- el %w[\t\n] no interpola la cadena
32.- el %W[\t][\n] crea un array con los elementos pero los interpola
33.- devuelve un array de 3 nils.
34.-devuelve un array con tres ceros
35.-Crea una copia de el array de x porque se le pasa x como parámetro
36.-Queda un array que contiene 0,2,4
37.-
 a[1,1]=[ "e"]

 a[-2,2]=["d", "e"]


 a[0..2]=["a", "b", "c"]

 a[0...1]=["a"]

a[-2..-1]=["d", "e"]
38. Las dos primeras operaciones modifican el array, cambian los valores dados por los que se le pasan, la tercera operacion añade por el principio los numeros 1,2,3, y la cuara elimina dos posiciones.
La sentencia a[-1][1]= ['Z'] cambia el último elemento por Z, y la ultima sentencia pone los dos últimos valores del array a nil

39.-> a = a + [4, 5]

=>[1, 2, 3, 4, 5]

>> a += [[6, 7, 8]]

=>[1, 2, 3, 4, 5, [6, 7, 8]]

>> a = a + 9

te da un error implicito no se puede sumar un elemento a un array

40.-
>> x = %w{a b c b a}

=> ["a", "b", "c", "b", "a"]

>> x = x - %w{b c d}

=>["a", "a"] 

41.-z= [0]*8
 => [0, 0, 0, 0, 0, 0, 0, 0] 
42.-a << 1

=>[1]

>> a << 2 << 3

=> [1, 2, 3]

>> a << [4, 5, 6]

=>[1, 2, 3, [4, 5, 6]] 

>> a.concat [7, 8]

=>1, 2, 3, [4, 5, 6], 7, 8] 

43.-
>> c = a | b

=>[1, 2, 3, 4, 5]

>> d = b | a

=>[5, 4, 3, 2, 1]

>> e = a & b

=>[2, 3, 4]

>> f = b & a

=>[4, 3, 2]

44.-
=>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>> c = a | b

>> b.to_a

=>[1, 2, 3, 4, 5, 6, 7, 8, 9]

>> b.include? 10

=>false

>> b.include? 8

=>true

>> b.step(2) {|x| print "#{x} " }

1 3 5 7 9  => 1...10 
>> 1..3.to_a

Esto te da un eror ya que para los fixnum no te deja convertirlo a array

45.->>
 r.member? 50

=>true

>> r.include? 99.9

=>true

>> r.member? 99.9

=>false

46.-
>> true.class

=>TrueClass

>> false.class

=>Flaseclass

>> puts "hello" if 0

=>hello
 => nil 

>> puts "hello" if nil

=> => nil

>> puts "hello" if ""

=>hello
 => nil 

47.-
>> x.class

=> => Symbol

>> x == ’sym’

=> da error sintacico

>> x == :sym

=>true

>> z = :’a long symbol’

=> :"a long symbol"

>> z.class

=>symbol

>> x == ’sym’.to_sym

=>true

>> x.to_s == ’sym’

=>tue

48.-
>> s = "Ruby"

=> "Ruby"

>> t = s

=> "Ruby"

>> t[-1] = ""

=> ""

>> print s

>> t = "Java"

=> "Java"

>> print s, t

Rubyjava => nil

49.-"%d %s" % [3, "rubies"]
 => "3 rubies" 
50.-
>> x, y = 4, 5

=> => [4, 5] 

>> z = x > y ? x : y

=>5

>> x,y,z = [1,2,3]

=>[1, 2, 3] 

51.-
>> x = { :a => 1, :b => 2 }

=> {:b=>2, :a=>1}

>> x.keys

=>[:a, :b]

>> x.values

=>[1, 2] 

>> x[:c] = 3

=> 3

>> x

=>{:a=>1, :b=>2, :c=>3} 
c

>> x.delete(’a’)

=> nil

>> x

=>{:a=>1, :b=>2, :c=>3} 

>> x.delete(:a)

=> 1

>> x

=>{:b=>2, :c=>3}

>> x = { :a => 1, :b => 2, :c => 4 }

=> {:b=>2, :c=>4, :a=>1}

>> x.delete_if { |k,v| v % 2 == 0 }

=>{:a=>1} 

>> x

=>{:a=>1}

52.- A yield se le pasa un bloque son los metodos para inicializar un hash se le pasa un bloque de codigo a una funcion
53.- con hash.new se crea un hash a count si se hace vacio no se creara un hast, como se le pasa 0 crea un hash vacio

54.- la cadena devuelve un error sintactico
55.- La primera asigna unos hash a c y la segunda los ordena de mayor a menor
